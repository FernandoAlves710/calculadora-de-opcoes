import streamlit as st
import numpy as np
import yfinance as yf
from scipy.stats import norm
from scipy.optimize import brentq
import plotly.graph_objects as go

# Fun√ß√£o para obter os dados do ativo (a√ß√£o ou ETF) do Yahoo Finance
def get_stock_data(ticker_symbol):
    stock = yf.Ticker(ticker_symbol)
    hist = stock.history(period="1y")  # Dados hist√≥ricos do √∫ltimo ano
    last_price = hist['Close'].iloc[-1]  # √öltimo pre√ßo de fechamento
    daily_returns = hist['Close'].pct_change().dropna()  # Mudan√ßa percentual di√°ria
    volatility = np.std(daily_returns) * np.sqrt(252)  # Volatilidade anualizada
    return last_price, volatility, hist

# Fun√ß√£o para calcular o pre√ßo da op√ß√£o usando o modelo de Black-Scholes
def black_scholes(S, K, T, r, sigma, option_type='call'):
    d1 = (np.log(S / K) + (r + sigma**2 / 2) * T) / (sigma * np.sqrt(T))
    d2 = d1 - sigma * np.sqrt(T)
    if option_type == 'call':
        return S * norm.cdf(d1) - K * np.exp(-r * T) * norm.cdf(d2)
    else:
        return K * np.exp(-r * T) * norm.cdf(-d2) - S * norm.cdf(-d1)

# Fun√ß√£o para calcular o pre√ßo da op√ß√£o americana usando o m√©todo de Monte Carlo
def monte_carlo_option_pricing_american(S, K, T, r, sigma, num_simulations=10000):
    dt = T / 365
    Z = np.random.normal(0, 1, (num_simulations, int(T * 365)))
    ST = S * np.exp(np.cumsum((r - 0.5 * sigma ** 2) * dt + sigma * np.sqrt(dt) * Z, axis=1))
    payoff = np.maximum(ST - K, 0)
    option_price = np.exp(-r * T) * np.mean(payoff, axis=1)
    return np.mean(option_price)

# Fun√ß√£o para calcular o pre√ßo da op√ß√£o asi√°tica usando o m√©todo de Monte Carlo
def monte_carlo_option_pricing_asian(S, K, T, r, sigma, num_simulations=10000):
    dt = T / 365
    Z = np.random.normal(0, 1, (num_simulations, int(T * 365)))
    ST = S * np.exp(np.cumsum((r - 0.5 * sigma ** 2) * dt + sigma * np.sqrt(dt) * Z, axis=1))
    ST_mean = np.mean(ST, axis=1)
    payoff = np.maximum(ST_mean - K, 0)
    option_price = np.exp(-r * T) * np.mean(payoff)
    return option_price

# Interface do usu√°rio
st.set_page_config(page_title="Calculadora de Op√ß√µes Avan√ßada", layout="wide", page_icon="üìà")

# Estilos personalizados
st.markdown("""
<style>
    .big-font {
        font-size:25px !important;
        font-weight: bold;
    }
    .reportview-container .main .block-container {
        padding-top: 2rem;
        padding-bottom: 2rem;
    }
    h1 {
        color: #0e1117;
    }
    .result {
        font-size: 20px;
        font-weight: bold;
        color: #036;
    }
    .description {
        font-size: 16px;
        color: #444;
    }
</style>
""", unsafe_allow_html=True)

# T√≠tulo
st.title('Calculadora de Op√ß√µes Avan√ßada')

# Sidebar para entrada de dados
st.write("## Par√¢metros de Entrada")
simbolo = st.text_input("Digite o s√≠mbolo do ativo desde moedas, a√ß√µes, commodities e etfs (ex: AAPL):")

if simbolo:
    S, volatility, hist = get_stock_data(simbolo)
    st.write(f"Pre√ßo Atual do Ativo: {S:.2f}")
    st.write(f"Volatilidade Anualizada: {volatility:.2%}")

    K = st.number_input("Pre√ßo de Exerc√≠cio (K):", min_value=0.0, value=S, format="%.2f")
    T = st.number_input("Tempo at√© a Expira√ß√£o (T) em anos:", min_value=0.0, value=1.0, step=0.1, format="%.2f")
    r = st.number_input("Taxa de Juros Sem Risco (r):", min_value=0.0, value=0.05, step=0.01, format="%.2f")
    option_type = st.selectbox("Tipo de Op√ß√£o:", ["Europeia", "Americana", "Asi√°tica"])

    if option_type == "Europeia":
        if st.button('Calcular Pre√ßo da Op√ß√£o'):
            preco_opcao = black_scholes(S, K, T, r, volatility)
            vol_imp = implied_volatility(S, K, T, r, preco_opcao)
            st.success(f"Pre√ßo da Op√ß√£o Calculada: ${preco_opcao:.2f}")
            st.write("### Gregas:")
            st.write(f"Delta: {delta(S, K, T, r, volatility):.4f} (sensibilidade do pre√ßo da op√ß√£o em rela√ß√£o ao pre√ßo do ativo subjacente)")
            st.write(f"Gamma: {gamma(S, K, T, r, volatility):.4f} (sensibilidade do delta em rela√ß√£o ao pre√ßo do ativo subjacente)")
            st.write(f"Vega: {vega(S, K, T, r, volatility):.4f} (sensibilidade do pre√ßo da op√ß√£o em rela√ß√£o √† volatilidade do ativo subjacente)")
            st.write("### Volatilidade Impl√≠cita:")
            st.write(f"{vol_imp:.2%}", cls="result")
            st.write("Descri√ß√£o: Volatilidade impl√≠cita √© a volatilidade futura do ativo subjacente, inferida do pre√ßo atual da op√ß√£o.")
    
    elif option_type == "Americana":
        if st.button('Calcular Pre√ßo da Op√ß√£o'):
            preco_opcao = monte_carlo_option_pricing_american(S, K, T, r, volatility)
            st.success(f"Pre√ßo da Op√ß√£o Calculada: ${preco_opcao:.2f}")
            st.write("### Gregas:")
            st.write(f"Delta: {delta(S, K, T, r, volatility):.4f} (sensibilidade do pre√ßo da op√ß√£o em rela√ß√£o ao pre√ßo do ativo subjacente)")
            st.write(f"Gamma: {gamma(S, K, T, r, volatility):.4f} (sensibilidade do delta em rela√ß√£o ao pre√ßo do ativo subjacente)")
            st.write(f"Vega: {vega(S, K, T, r, volatility):.4f} (sensibilidade do pre√ßo da op√ß√£o em rela√ß√£o √† volatilidade do ativo subjacente)")
            st.write("### Volatilidade Impl√≠cita:")
            st.write(f"{vol_imp:.2%}", cls="result")
            st.write("Descri√ß√£o: Volatilidade impl√≠cita √© a volatilidade futura do ativo subjacente, inferida do pre√ßo atual da op√ß√£o.")

    elif option_type == "Asi√°tica":
        if st.button('Calcular Pre√ßo da Op√ß√£o'):
            preco_opcao = monte_carlo_option_pricing_asian(S, K, T, r, volatility)
            st.success(f"Pre√ßo da Op√ß√£o Calculada: ${preco_opcao:.2f}")
            st.write("### Gregas:")
            st.write(f"Delta: {delta(S, K, T, r, volatility):.4f} (sensibilidade do pre√ßo da op√ß√£o em rela√ß√£o ao pre√ßo do ativo subjacente)")
            st.write(f"Gamma: {gamma(S, K, T, r, volatility):.4f} (sensibilidade do delta em rela√ß√£o ao pre√ßo do ativo subjacente)")
            st.write(f"Vega: {vega(S, K, T, r, volatility):.4f} (sensibilidade do pre√ßo da op√ß√£o em rela√ß√£o √† volatilidade do ativo subjacente)")
            st.write("### Volatilidade Impl√≠cita:")
            st.write(f"{vol_imp:.2%}", cls="result")
            st.write("Descri√ß√£o: Volatilidade impl√≠cita √© a volatilidade futura do ativo subjacente, inferida do pre√ßo atual da op√ß√£o.")

    st.write("## Hist√≥rico de Pre√ßos")
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=hist.index, y=hist['Close'], mode='lines', name='Close Price'))
    fig.update_layout(title='Hist√≥rico de Pre√ßos do Ativo nos √öltimos 12 Meses',
                      xaxis_title='Data', yaxis_title='Pre√ßo')
    st.plotly_chart(fig)
